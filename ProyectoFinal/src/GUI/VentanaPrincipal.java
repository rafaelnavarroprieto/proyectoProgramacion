/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import informacion.*;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 * Ventana principal del programa
 *
 * @author Rafael Navarro Prieto
 * @version 1.0
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        mensajeArena.setVisible(false);
        setTitle(Intermediaria.archivo.getName() + " - Ventana principal - " + Intermediaria.getFecha());
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mostrar = new javax.swing.JButton();
        crear = new javax.swing.JButton();
        arena = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        mensajeArena = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        abrir = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        guardarComo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(610, 500));
        setMinimumSize(new java.awt.Dimension(610, 500));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mostrar.setText(" almacen de unidades");
        mostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarActionPerformed(evt);
            }
        });
        getContentPane().add(mostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 310, 160, -1));

        crear.setText("Crear unidades");
        crear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearActionPerformed(evt);
            }
        });
        getContentPane().add(crear, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 160, -1));

        arena.setText("arena");
        arena.setEnabled(false);
        arena.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                arenaMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                arenaMouseExited(evt);
            }
        });
        getContentPane().add(arena, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, 160, -1));

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        getContentPane().add(salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 410, 160, -1));

        eliminar.setText("Eliminar unidades");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });
        getContentPane().add(eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, 160, -1));

        mensajeArena.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        mensajeArena.setForeground(new java.awt.Color(255, 0, 0));
        mensajeArena.setText("Opción en construcción");
        getContentPane().add(mensajeArena, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 360, 180, 20));

        jLabel2.setFont(new java.awt.Font("Starcraft", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("The end battle");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, 280, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/otros/FondoFinal.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-10, 0, 630, 480));

        menuArchivo.setMnemonic('A');
        menuArchivo.setText("Archivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Nuevo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        menuArchivo.add(jMenuItem1);

        abrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        abrir.setText("Abrir");
        abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirActionPerformed(evt);
            }
        });
        menuArchivo.add(abrir);

        guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        menuArchivo.add(guardar);

        guardarComo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarComo.setText("Guardar como...");
        guardarComo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarComoActionPerformed(evt);
            }
        });
        menuArchivo.add(guardarComo);
        menuArchivo.add(jSeparator1);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        exit.setText("Salir");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        menuArchivo.add(exit);

        jMenuBar1.add(menuArchivo);

        menuAyuda.setMnemonic('y');
        menuAyuda.setText("Ayuda");
        menuAyuda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuAyudaMouseClicked(evt);
            }
        });
        jMenuBar1.add(menuAyuda);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void arenaMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arenaMouseEntered
        mensajeArena.setVisible(true);
    }//GEN-LAST:event_arenaMouseEntered

    private void arenaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_arenaMouseExited
        mensajeArena.setVisible(false);
    }//GEN-LAST:event_arenaMouseExited

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        cerrar();
    }//GEN-LAST:event_salirActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        cerrar();
    }//GEN-LAST:event_exitActionPerformed

    private void crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearActionPerformed
        alta = new altaUnidad(this);
        alta.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_crearActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        borrar = new Eliminar(this);
        borrar.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_eliminarActionPerformed

    private void mostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarActionPerformed
        if (Intermediaria.lista.size() > 0) {
            buscador = new Buscar(this);
            buscador.setVisible(true);
            setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "No hay ninguna unidad en el almacen", "ERROR!!!!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_mostrarActionPerformed

    private void menuAyudaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuAyudaMouseClicked
        ayuda.setVisible(true);
        ayuda.toFront();

    }//GEN-LAST:event_menuAyudaMouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        if (Intermediaria.isModificado()) { // Si se modifico la lista
            Object[] options = {"OK", "NO", "CANCEL"};
            int respuesta = JOptionPane.showOptionDialog(null, "No has guardado,¿Desea Guardar?", "NO HAS GUARDADO!!!!!",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
            switch (respuesta) {
                case JOptionPane.YES_OPTION:
                    guardarComo();
				nuevo();

                    return;
                case JOptionPane.NO_OPTION:
				nuevo();

                    return;
            }
        }
        // Si no se modifico
        nuevo();


    }//GEN-LAST:event_jMenuItem1ActionPerformed
    /**
     * Metodo que abre un archivo nuevo
     */
	private void nuevo() {
		Intermediaria.setArchivo("Sin_titulo");
        Intermediaria.lista = new Lista();
        setTitle(Intermediaria.archivo.getName());
	}

    private void guardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarComoActionPerformed
        guardarComoFile();
    }//GEN-LAST:event_guardarComoActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        guardarComo();
    }//GEN-LAST:event_guardarActionPerformed

    private void abrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirActionPerformed
        try {
            if (Intermediaria.isModificado()) { // Si se modifico la lista
                Object[] options = {"OK", "NO", "CANCEL"};
                int respuesta = JOptionPane.showOptionDialog(null, "No has guardado,¿Desea Guardar?", "NO HAS GUARDADO!!!!!",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                switch (respuesta) {
                    case JOptionPane.YES_OPTION:
                        guardarComo();
                        abrirArchivo();
                        return;
                    case JOptionPane.NO_OPTION:
                        abrirArchivo();
                        return;
                    case JOptionPane.CANCEL_OPTION:
                        return;
                }
            }

            // Si no se modifico la lista 
            abrirArchivo();

        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(contentPanel, "El archivo no se ha podido abrir", "ERROR!!!!", JOptionPane.ERROR_MESSAGE);
            Intermediaria.nuevo();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(contentPanel, "El archivo no se ha podido abrir", "ERROR!!!!", JOptionPane.ERROR_MESSAGE);


        }
    }//GEN-LAST:event_abrirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    /**
     * Método main
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    /**
     * clase que se utiliza para los mensajes de error o de informaciï¿½n
     */
    protected final JPanel contentPanel = new JPanel();
    /**
     * Ventana para añadir unidades
     */
    private altaUnidad alta;
    /**
     *
     * Ventana para eliminar unidades
     */
    private Eliminar borrar;
    /**
     * Ventana para monstrar unidades
     */
    private Buscar buscador;
    /**
     * Ventana ayuda
     */
    private Ayuda ayuda = new Ayuda();
    /**
     * Filtro aplicado a los JFileChooser
     */
    private final Filtro filtro = new Filtro(".rnp", "Rafael Navarro Prieto");
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrir;
    private javax.swing.JButton arena;
    private javax.swing.JButton crear;
    private javax.swing.JButton eliminar;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem guardarComo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel mensajeArena;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JButton mostrar;
    private javax.swing.JButton salir;
    // End of variables declaration//GEN-END:variables
    /**
     * Operaciones a realizar para guardar un archivo especificando el nombre
     */
    private void guardarComoFile() {
        //Creamos el JFileChooser
        JFileChooser guardarComo = new JFileChooser();
        guardarComo.setAcceptAllFileFilterUsed(false);
        guardarComo.addChoosableFileFilter(filtro);

        //Si se pulsa el botón aceptar
        if (guardarComo.APPROVE_OPTION == guardarComo.showDialog(guardarComo, "Guardar Archivo")) {
            guardarComo.setAcceptAllFileFilterUsed(false);
            Intermediaria.comprobarArchivo(guardarComo.getSelectedFile());
            if (Intermediaria.archivo.exists()) { // si el archivo existe, preguntamos si sobreescribimos
                Object[] options = {"Si", "No"};
                int respuesta = JOptionPane.showOptionDialog(null, "El archivo ya existe,¿Desea Sobreescribir?", "Guardando",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                        null, options, options[0]);
                //acciones a realizar segun el botón seleccionado en el JFileChooser
                switch (respuesta) {
                    case JOptionPane.YES_OPTION:
                        guardarArchivoDelJFileChooser();
                        return;
                    case JOptionPane.NO_OPTION:
                        JOptionPane.showMessageDialog(null, "El archivo no se ha guardado", "ERROR!!!!", JOptionPane.ERROR_MESSAGE);

                        return;
                }

            }
            //Si el archivo no existe no se comprueba nada y se guarda directamente
            guardarArchivoDelJFileChooser();

        }
    }

    /**
     * Guardamos el archivo
     */
    private void guardarArchivoDelJFileChooser() {
        try {
            Intermediaria.guardarComo(Intermediaria.lista, Intermediaria.archivo);
            setTitle(Intermediaria.archivo.getName());
        } catch (IOException ex) {
        }
    }

    /**
     * Operaciones ha realizar para abrir un archivo
     *
     * @throws ClassNotFoundException excepción que salta si el archivo no
     * coincide con el requerido
     * @throws IOException excepción que salta cuando el archivo se termino de
     * abrir
     */
    private void abrirArchivo() throws ClassNotFoundException, IOException {
        //Creamos el JFileChooser

        JFileChooser abrir = new JFileChooser();
        abrir.setAcceptAllFileFilterUsed(false);
        abrir.addChoosableFileFilter(filtro);

        //Si se pulsa el botón aceptar
        if (abrir.showDialog(abrir, "Abrir Archivo") == abrir.APPROVE_OPTION) {
            Intermediaria.archivo = abrir.getSelectedFile();
            Intermediaria.abrir(abrir.getSelectedFile());
            setTitle(Intermediaria.archivo.getName());

        }
    }

    /**
     * Operación que se realiza para guardar un archivo ya abierto
     */
    private void guardarComo() {
        if (Intermediaria.archivo.getName().equalsIgnoreCase("Sin_titulo")) {
            guardarComoFile();

        } else {
            try {
                Intermediaria.guardar(Intermediaria.lista);

            } catch (IOException ex) {
            }
        }
    }
    /**
     * Método que cierra el programa
     */
    private void cerrar() {
        if (Intermediaria.isModificado()) { // Si se modifico la lista
            Object[] options = {"OK", "NO", "CANCEL"};
            int respuesta = JOptionPane.showOptionDialog(null, "No has guardado,¿Desea Guardar?", "NO HAS GUARDADO!!!!!",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE,
                    null, options, options[0]);
            switch (respuesta) {
                case JOptionPane.YES_OPTION: //Se lanza el guardarComo
                    guardarComo();
                    System.exit(0);
                    return;
                case JOptionPane.NO_OPTION: //Se cierra 
                    System.exit(0);
                    return;
                case JOptionPane.CANCEL_OPTION: //No ocurre nada
                    setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
                    return;
            }
        }
        // Si no se modifico la lista
        ayuda.dispose();
        System.exit(0);
    }
}
